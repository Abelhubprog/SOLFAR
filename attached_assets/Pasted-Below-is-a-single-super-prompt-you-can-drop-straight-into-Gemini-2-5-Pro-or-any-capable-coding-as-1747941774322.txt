Below is a single “super-prompt” you can drop straight into Gemini 2.5 Pro (or any capable coding-assistant model inside your IDE) to finish, polish, and deploy the entire **Sol-Farcaster** page—including live pump.fun hooks, Dexscreener charting, wallet support, and Vercel build fixes.

---

## ◎ SUPER-PROMPT: “Ship the SOLFAR trading page”

> **Context**
> I’m building a one-page React app that celebrates Solana’s arrival on Farcaster.
> The current file is `SolFarcasterPage.jsx` (full code pasted below).
> ✔ Features already in place
> • Animated starfield (react-tsparticles, preset = “stars”)
> • Hero with Framer Motion headline
> • 3-D Solana coin (react-three/fiber + drei)
> • Trading hub showing a **pump.fun** bonding-curve widget, a **Dexscreener** candle chart, and live stats placeholders
> • Tokenomics cards, “How it works” steps, responsive Tailwind layout
> • Footer with contract / Warpcast / X links
>
> **What I need you to do**
>
> 1. **Replace placeholders**
>    • `TOKEN_ADDRESS` → real SPL token (I’ll pass it via an env var)
>    • `PUMP_FUN_WIDGET_URL` → use the pump.fun **embed** URL for that token
> 2. **Real-time data**
>    • Swap the mock `setInterval` price/supply with pump.fun WebSocket or REST (whichever is documented)
>    • Format numbers with `intl-number-format` for locale clarity
> 3. **Wallet & bridge**
>    • Add Solana Wallet Adapter (Phantom, Solflare, Backpack)
>    • Connect button should pop a modal and show “Mint” only when connected
>    • Use pump.fun’s `bridgeToSolana` endpoint after purchase (if available)
> 4. **SSR / hydration**
>    • Wrap Three.js Canvas in dynamic import `{ ssr:false }` if Next-13/14 App Router complains on Vercel
>    • Ensure `react-tsparticles` loads client-side only
> 5. **Type safety**
>    • Convert to `SolFarcasterPage.tsx` (strict mode)
>    • Add minimal custom types for pump.fun responses
> 6. **Performance**
>    • Use `next/dynamic` for Dexscreener iframe and heavy libs
>    • Tree-shake unused three.js extras
> 7. **Accessibility & mobile polish**
>    • Provide `aria-label`s for iframes and buttons
>    • Test on iPhone SE viewport (320 px)
> 8. **Vercel build**
>    • Node 18 runtime, pnpm 10 lockfile
>    • Add `tsparticles-preset-stars` to `transpilePackages` if needed
> 9. **Documentation**
>    • Produce a short README with env vars (`NEXT_PUBLIC_TOKEN_ADDRESS`, etc.), setup, and deploy steps
> 10. **Stretch** (optional)
>     • Confetti burst when a wallet mints the first tokens
>     • Dark/light toggle (respect system preference)
>     • SEO: title, meta description, OG image

> **Here is the code to start from:**
>
> ```jsx
> (paste the entire SolFarcasterPage.jsx from version 5 here)
> ```

**Deliverables**

* Updated page (TSX) compiling locally and on Vercel
* `package.json` diff with any new deps
* README.md with clear run/deploy commands
* A brief explanation of how you solved each step

---

### How to use

1. Copy the prompt block exactly as-is into Gemini 2.5 Pro.
2. Replace `(paste the entire … code here)` with the actual contents of the file.
3. Provide your token address via chat or as an `.env` snippet when Gemini asks.
4. Let the model iterate; accept code suggestions directly into the repo.
5. Redeploy on Vercel—build warnings should be gone.

Feel free to tweak any step or add further instructions (e.g., swap Tailwind colors) before sending the prompt. Enjoy the automated polish!
